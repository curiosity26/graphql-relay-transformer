// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Many-to-many with conflict resolution generates correct schema 1`] = `
"type Post {
  id: ID!
  title: String!
  editors(editorID: RelayModelIDKeyConditionInput, filter: RelayModelPostEditorFilterInput, sortDirection: RelayModelSortDirection, first: Int, after: String): RelayModelPostEditorConnection
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type PostEditor {
  id: ID!
  postID: ID!
  editorID: ID!
  post: Post!
  editor: User!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type User {
  id: ID!
  username: String!
  posts(postID: RelayModelIDKeyConditionInput, filter: RelayModelPostEditorFilterInput, sortDirection: RelayModelSortDirection, first: Int, after: String): RelayModelPostEditorConnection
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

enum RelayModelSortDirection {
  ASC
  DESC
}

type RelayModelPostConnection {
  edges: [RelayModelPostEdge]
  pageInfo: PageInfo
  startedAt: AWSTimestamp
}

input RelayModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: RelayModelAttributeTypes
  size: RelayModelSizeInput
}

input RelayModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: RelayModelAttributeTypes
  size: RelayModelSizeInput
}

input RelayModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: RelayModelAttributeTypes
}

input RelayModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: RelayModelAttributeTypes
}

input RelayModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: RelayModelAttributeTypes
}

input RelayModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input RelayModelPostFilterInput {
  id: RelayModelIDInput
  title: RelayModelStringInput
  and: [RelayModelPostFilterInput]
  or: [RelayModelPostFilterInput]
  not: RelayModelPostFilterInput
}

enum RelayModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

type Query {
  syncPosts(filter: RelayModelPostFilterInput, first: Int, after: String, lastSync: AWSTimestamp): RelayModelPostConnection
  getPost(id: ID!): Post
  listPosts(filter: RelayModelPostFilterInput, first: Int, after: String): RelayModelPostConnection
  syncPostEditors(filter: RelayModelPostEditorFilterInput, first: Int, after: String, lastSync: AWSTimestamp): RelayModelPostEditorConnection
  syncUsers(filter: RelayModelUserFilterInput, first: Int, after: String, lastSync: AWSTimestamp): RelayModelUserConnection
  getUser(id: ID!): User
  listUsers(filter: RelayModelUserFilterInput, first: Int, after: String): RelayModelUserConnection
}

input CreatePostInput {
  id: ID
  title: String!
  _version: Int
}

input UpdatePostInput {
  id: ID!
  title: String
  _version: Int
}

input DeletePostInput {
  id: ID!
  _version: Int
}

type Mutation {
  createPost(input: CreatePostInput!, condition: RelayModelPostConditionInput): Post
  updatePost(input: UpdatePostInput!, condition: RelayModelPostConditionInput): Post
  deletePost(input: DeletePostInput!, condition: RelayModelPostConditionInput): Post
  createPostEditor(input: CreatePostEditorInput!, condition: RelayModelPostEditorConditionInput): PostEditor
  updatePostEditor(input: UpdatePostEditorInput!, condition: RelayModelPostEditorConditionInput): PostEditor
  deletePostEditor(input: DeletePostEditorInput!, condition: RelayModelPostEditorConditionInput): PostEditor
  createUser(input: CreateUserInput!, condition: RelayModelUserConditionInput): User
  updateUser(input: UpdateUserInput!, condition: RelayModelUserConditionInput): User
  deleteUser(input: DeleteUserInput!, condition: RelayModelUserConditionInput): User
}

input RelayModelPostConditionInput {
  title: RelayModelStringInput
  and: [RelayModelPostConditionInput]
  or: [RelayModelPostConditionInput]
  not: RelayModelPostConditionInput
}

type Subscription {
  onCreatePost: Post @aws_subscribe(mutations: [\\"createPost\\"])
  onUpdatePost: Post @aws_subscribe(mutations: [\\"updatePost\\"])
  onDeletePost: Post @aws_subscribe(mutations: [\\"deletePost\\"])
  onCreatePostEditor: PostEditor @aws_subscribe(mutations: [\\"createPostEditor\\"])
  onUpdatePostEditor: PostEditor @aws_subscribe(mutations: [\\"updatePostEditor\\"])
  onDeletePostEditor: PostEditor @aws_subscribe(mutations: [\\"deletePostEditor\\"])
  onCreateUser: User @aws_subscribe(mutations: [\\"createUser\\"])
  onUpdateUser: User @aws_subscribe(mutations: [\\"updateUser\\"])
  onDeleteUser: User @aws_subscribe(mutations: [\\"deleteUser\\"])
}

type RelayModelPostEditorConnection {
  edges: [RelayModelPostEditorEdge]
  pageInfo: PageInfo
  startedAt: AWSTimestamp
}

input RelayModelPostEditorFilterInput {
  id: RelayModelIDInput
  postID: RelayModelIDInput
  editorID: RelayModelIDInput
  and: [RelayModelPostEditorFilterInput]
  or: [RelayModelPostEditorFilterInput]
  not: RelayModelPostEditorFilterInput
}

input CreatePostEditorInput {
  id: ID
  postID: ID!
  editorID: ID!
  _version: Int
}

input UpdatePostEditorInput {
  id: ID!
  postID: ID
  editorID: ID
  _version: Int
}

input DeletePostEditorInput {
  id: ID!
  _version: Int
}

input RelayModelPostEditorConditionInput {
  id: RelayModelIDInput
  postID: RelayModelIDInput
  editorID: RelayModelIDInput
  and: [RelayModelPostEditorConditionInput]
  or: [RelayModelPostEditorConditionInput]
  not: RelayModelPostEditorConditionInput
}

type RelayModelUserConnection {
  edges: [RelayModelUserEdge]
  pageInfo: PageInfo
  startedAt: AWSTimestamp
}

input RelayModelUserFilterInput {
  id: RelayModelIDInput
  username: RelayModelStringInput
  and: [RelayModelUserFilterInput]
  or: [RelayModelUserFilterInput]
  not: RelayModelUserFilterInput
}

input CreateUserInput {
  id: ID
  username: String!
  _version: Int
}

input UpdateUserInput {
  id: ID!
  username: String
  _version: Int
}

input DeleteUserInput {
  id: ID!
  _version: Int
}

input RelayModelUserConditionInput {
  username: RelayModelStringInput
  and: [RelayModelUserConditionInput]
  or: [RelayModelUserConditionInput]
  not: RelayModelUserConditionInput
}

input ModelIDKeyConditionInput {
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  between: [ID]
  beginsWith: ID
}
"
`;

exports[`Many-to-many without conflict resolution generates correct schema 1`] = `
"type Post {
  id: ID!
  title: String!
  editors(editorID: RelayModelIDKeyConditionInput, filter: RelayModelPostEditorFilterInput, sortDirection: RelayModelSortDirection, first: Int, after: String): RelayModelPostEditorConnection
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type PostEditor {
  id: ID!
  postID: ID!
  editorID: ID!
  post: Post!
  editor: User!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type User {
  id: ID!
  username: String!
  posts(postID: RelayModelIDKeyConditionInput, filter: RelayModelPostEditorFilterInput, sortDirection: RelayModelSortDirection, first: Int, after: String): RelayModelPostEditorConnection
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

enum RelayModelSortDirection {
  ASC
  DESC
}

type RelayModelPostConnection {
  edges: [RelayModelPostEdge]
  pageInfo: PageInfo
}

input RelayModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: RelayModelAttributeTypes
  size: RelayModelSizeInput
}

input RelayModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: RelayModelAttributeTypes
  size: RelayModelSizeInput
}

input RelayModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: RelayModelAttributeTypes
}

input RelayModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: RelayModelAttributeTypes
}

input RelayModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: RelayModelAttributeTypes
}

input RelayModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input RelayModelPostFilterInput {
  id: RelayModelIDInput
  title: RelayModelStringInput
  and: [RelayModelPostFilterInput]
  or: [RelayModelPostFilterInput]
  not: RelayModelPostFilterInput
}

enum RelayModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

type Query {
  getPost(id: ID!): Post
  listPosts(filter: RelayModelPostFilterInput, first: Int, after: String): RelayModelPostConnection
  getUser(id: ID!): User
  listUsers(filter: RelayModelUserFilterInput, first: Int, after: String): RelayModelUserConnection
}

input CreatePostInput {
  id: ID
  title: String!
}

input UpdatePostInput {
  id: ID!
  title: String
}

input DeletePostInput {
  id: ID!
}

type Mutation {
  createPost(input: CreatePostInput!, condition: RelayModelPostConditionInput): Post
  updatePost(input: UpdatePostInput!, condition: RelayModelPostConditionInput): Post
  deletePost(input: DeletePostInput!, condition: RelayModelPostConditionInput): Post
  createPostEditor(input: CreatePostEditorInput!, condition: RelayModelPostEditorConditionInput): PostEditor
  updatePostEditor(input: UpdatePostEditorInput!, condition: RelayModelPostEditorConditionInput): PostEditor
  deletePostEditor(input: DeletePostEditorInput!, condition: RelayModelPostEditorConditionInput): PostEditor
  createUser(input: CreateUserInput!, condition: RelayModelUserConditionInput): User
  updateUser(input: UpdateUserInput!, condition: RelayModelUserConditionInput): User
  deleteUser(input: DeleteUserInput!, condition: RelayModelUserConditionInput): User
}

input RelayModelPostConditionInput {
  title: RelayModelStringInput
  and: [RelayModelPostConditionInput]
  or: [RelayModelPostConditionInput]
  not: RelayModelPostConditionInput
}

type Subscription {
  onCreatePost: Post @aws_subscribe(mutations: [\\"createPost\\"])
  onUpdatePost: Post @aws_subscribe(mutations: [\\"updatePost\\"])
  onDeletePost: Post @aws_subscribe(mutations: [\\"deletePost\\"])
  onCreatePostEditor: PostEditor @aws_subscribe(mutations: [\\"createPostEditor\\"])
  onUpdatePostEditor: PostEditor @aws_subscribe(mutations: [\\"updatePostEditor\\"])
  onDeletePostEditor: PostEditor @aws_subscribe(mutations: [\\"deletePostEditor\\"])
  onCreateUser: User @aws_subscribe(mutations: [\\"createUser\\"])
  onUpdateUser: User @aws_subscribe(mutations: [\\"updateUser\\"])
  onDeleteUser: User @aws_subscribe(mutations: [\\"deleteUser\\"])
}

input CreatePostEditorInput {
  id: ID
  postID: ID!
  editorID: ID!
}

input UpdatePostEditorInput {
  id: ID!
  postID: ID
  editorID: ID
}

input DeletePostEditorInput {
  id: ID!
}

input RelayModelPostEditorConditionInput {
  id: RelayModelIDInput
  postID: RelayModelIDInput
  editorID: RelayModelIDInput
  and: [RelayModelPostEditorConditionInput]
  or: [RelayModelPostEditorConditionInput]
  not: RelayModelPostEditorConditionInput
}

type RelayModelUserConnection {
  edges: [RelayModelUserEdge]
  pageInfo: PageInfo
}

input RelayModelUserFilterInput {
  id: RelayModelIDInput
  username: RelayModelStringInput
  and: [RelayModelUserFilterInput]
  or: [RelayModelUserFilterInput]
  not: RelayModelUserFilterInput
}

input CreateUserInput {
  id: ID
  username: String!
}

input UpdateUserInput {
  id: ID!
  username: String
}

input DeleteUserInput {
  id: ID!
}

input RelayModelUserConditionInput {
  username: RelayModelStringInput
  and: [RelayModelUserConditionInput]
  or: [RelayModelUserConditionInput]
  not: RelayModelUserConditionInput
}

input ModelIDKeyConditionInput {
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  between: [ID]
  beginsWith: ID
}

type RelayModelPostEditorConnection {
  edges: [RelayModelPostEditorEdge]
  pageInfo: PageInfo
}

type RelayModelPostEditorEdge {
  node: PostEditor
  cursor: String
}

input RelayModelPostEditorFilterInput {
  id: RelayModelIDInput
  postID: RelayModelIDInput
  editorID: RelayModelIDInput
  and: [RelayModelPostEditorFilterInput]
  or: [RelayModelPostEditorFilterInput]
  not: RelayModelPostEditorFilterInput
}
"
`;
